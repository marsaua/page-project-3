
const logInButton = document.querySelector(".log_in_button");
const logInForm = document.querySelector(".login_form");
const content = document.querySelector(".main_conteiner");
const passwordInput = document.getElementById("exampleInputPassword1");
const emailInput = document.getElementById("exampleInputEmail1");
const mistake = document.querySelector(".email_wrong");
const cardWrapper = document.querySelector(".cards_wrapper");
const main = document.querySelector(".main");
const closeLogin = document.getElementById("close_login");
const submitButton = document.querySelector(".login_submit");
const createAppoint = document.getElementById("new_appointment_button");
let token = "";
let objects;
logInButton.addEventListener("click", (event) => {
  event.preventDefault();
  logInForm.style.display = "flex";
  main.classList.add("login_bg");
});

async function authorisation(email, password) {
  if (email !== "cooluser@gmail.com" || password !== "SuperPuper123") {
    mistake.style.opacity = "1";
  } else {
    logInForm.style.display = "none";
    cardWrapper.style.display = "block";
    content.style.display = "none";
    main.classList.remove("login_bg");
    logInButton.style.display = "none";
    createAppoint.style.display = "block";

    await fetch("https://ajax.test-danit.com/api/v2/cards/login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email: "your@email.com", password: "password" }),
    })
      .then((response) => response.text())
      .then((token) => {
        return token;
      })
      .then((result) => (token = result));
    const cardAll = {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
    };
    sendRequest("https://ajax.test-danit.com/api/v2/cards", "GET", cardAll)
      .then((response) => response)
      .then((objects) => {
        objects.map((item) => {
          const modalFromServer = new Modal();
          modalFromServer.checkingForCards();
          modalFromServer.createCard(item, item.id, "DELETE");
        });
      });
  }
}

logInForm.addEventListener("submit", (event) => {
  const email = event.target[0].value;
  const password = event.target[1].value;
  authorisation(email, password);
  event.preventDefault();
});

function handlePasswordInput() {
  mistake.style.opacity = "0";
}
passwordInput.addEventListener("focus", () => handlePasswordInput());
emailInput.addEventListener("focus", () => handlePasswordInput());

document.body.addEventListener("click", (event) => {
  if (event.target.closest("#close_login")) {
    logInForm.style.display = "none";
    main.classList.remove("login_bg");
  }
});

const API = "https://ajax.test-danit.com/api/v2/cards";

const orderCards = document.querySelector(".order__cards");
const cardsWrapper = document.createElement("div");
const modalWrapper = document.querySelector(".modal_cards");
cardsWrapper.classList.add("cards_conteiner");
let statusDelete;

class Modal {
  constructor(name, id, objective, description, urgency, doctor) {
    this.name = name;
    this.id = id;
    this.objective = objective;
    this.description = description;
    this.urgency = urgency;
    this.doctor = doctor;
  }
  checkingForCards() {
    const noCards = document.querySelector(".no__cards");
    if (cardsWrapper.innerHTML !== "") {
      noCards.style.display = "none";
    } else {
      noCards.style.display = "block";
    }
  }
  render(
    descriptionDev = "",
    doctorDev = "Choose a doctor",
    fullNameDev = "",
    urgencyDev = "normal",
    visitDev = "",
    statusCardDev = "Open"
  ) {
    modalWrapper.insertAdjacentHTML(
      "beforeend",
      `
            <section class="cards">
            <form action="" class="cards__form form "> 
            <p class="cards__closed" jsname="itVqKe"><svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></svg></p>
        <p>Fill out the patient card</p>
        <select  class="cards__select" name="doctor" id="doctors__select">
            <option value="${doctorDev}" selected disabled>${doctorDev}</option>
            <option value="cardiologist">Cardiologist</option>
            <option value="dentist">Dentist</option>
            <option value="therapist">Therapist</option>
        </select>

    <div class="form__content__item item">
        <label for="fullName">Full name</label>
        <input required value="${fullNameDev}" class="item__input"
        id="fullName"
        name="fullName"
        type="text"
        tabindex="3"
        />
    </div>
            
        <div class="urgency">
            <select class="cards__select" name="urgency">
                <option value="${urgencyDev}" selected disabled>Urgency</option>
                <option value="high">High</option>
                <option value="normal">Normal</option>
                <option value="low">Low</option>
            </select>
        </div>
        <div class="status">
            <select class="cards__select" name="status" id='status__card' disabled>
                <option value="${statusCardDev}" selected disabled>${statusCardDev}</option>
                <option selected value="open">Open</option>
                <option value="done">Done</option>
            </select>
        </div>

    <div class="form__content">
      <div class="form__content__item item">
        <label for="visit">Purpose of visit</label>
        <input required value="${visitDev}" class="item__input"
          id="visit"
          name="visit"
          type="text"
          tabindex="1"
        />
      </div>
      <div class="form__content__item item">
        <label for="description">Description</label>
        <input required value="${descriptionDev}" class="item__input"
          id="description"
          name="description"
          type="text"
          tabindex="2"
        />
      </div>

      <div class="specialDoctorWrapper">
      </div>
     

    </div>
     </form>
    </div></section>
        `
    );
    main.classList.add("login_bg");
  }
  chooseDoctor() {
    const dropDownDoctor = document.querySelector("#doctors__select");
    dropDownDoctor.addEventListener("change", (event) => {
      this.doctor = event.target.value;

      const visitDentist = new VisitDentist();
      visitDentist.test(this.doctor);

      const visitCardiologist = new VisitCardiologist();
      visitCardiologist.test(this.doctor);

      const visitTherapist = new VisitTherapist();
      visitTherapist.test(this.doctor);
    });
    this.submit("POST");
  }

  closeCardForm() {
    const form = document.querySelector(".cards");
    const closed = document.querySelector(".cards__closed");
    closed.addEventListener("click", () => {
      main.classList.remove("login_bg");
      modalWrapper.innerHTML = "";
    });
    form.addEventListener("click", (event) => {
      event.stopPropagation();
    });
    main.addEventListener("click", () => {
      main.classList.remove("login_bg");
      modalWrapper.innerHTML = "";
    });
  }
  async submit(method, idCard) {
    const form = document.querySelector(".cards__form");
    form.addEventListener("submit", (event) => {
      event.preventDefault();
      const inputElements = event.target.querySelectorAll("[name]");
      const valuesObject = Array.from(inputElements).reduce(
        (accumulator, input) => {
          accumulator[input.name] = input.value;
          return accumulator;
        },
        {}
      );
      main.classList.remove("login_bg");
      modalWrapper.innerHTML = "";
      if (method === "POST") {
        const createCardRequest = {
          method: `${method}`,
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(valuesObject),
        };

        sendRequest(API, "POST", createCardRequest)
          .then((data) => {
            const { id } = data;
            this.createCard(valuesObject, id, "DELETE");
            this.checkingForCards();
          })
          .catch((error) => {
            console.error("Помилка:", error);
          });
      } else if (method === "PUT") {
        const sendRequestCards = {
          method: `${method}`,
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(valuesObject),
        };
        sendRequest(`${API}/${idCard}`, "PUT", sendRequestCards)
          .then((response) => response)

          .catch((error) => {
            console.error("Помилка: " + error);
          });

        const cardWrapper = document.getElementById(`${idCard}`);
        const moInfo = cardWrapper.querySelector(".another_info");
        for (let item in valuesObject) {
          if (item === "fullName") {
            cardWrapper.querySelector(".fullName").textContent =
              valuesObject[item];
          } else if (item === "doctor") {
            cardWrapper.querySelector(".doctor").textContent =
              valuesObject[item][0].toUpperCase() + valuesObject[item].slice(1);
          } else {
            const info = moInfo.querySelector(`.${item.toUpperCase()}`);
            info.textContent = `${item.toUpperCase()}: ${valuesObject[item]}`;
          }
        }
      }
    });
  }

  createCard(data, id, method) {
    const cardWrapper = document.createElement("div");
    cardWrapper.classList.add("card_wrapper");
    cardWrapper.setAttribute("id", id);

    const cardTitle = document.createElement("h3");
    cardTitle.classList.add("fullName");
    const cardDoctor = document.createElement("h4");
    cardDoctor.classList.add("doctor");

    const anotherInfoWrap = document.createElement("div");
    anotherInfoWrap.classList.add("another_info");

    const buttonsWrap = document.createElement("div");
    buttonsWrap.classList.add("button_wrapper");
    const showMore = document.createElement("p");
    showMore.innerText = "Show more...";
    showMore.classList.add("show_more");
    showMore.addEventListener("click", () => {
      showMore.style.display = "none";
      anotherInfoWrap.style.display = "block";
    });

    const changeButton = document.createElement("button");
    changeButton.innerText = "Edit";
    changeButton.classList.add("btn");
    changeButton.classList.add("btn-primary");
    changeButton.setAttribute("data-button", "change");

    const removeCard = document.createElement("button");
    removeCard.innerText = "Remove";
    removeCard.classList.add("btn");
    removeCard.classList.add("btn-primary");
    removeCard.setAttribute("data-button", "remove");
    removeCard.classList.add("remove__button");

    cardsWrapper.append(cardWrapper);
    cardWrapper.append(
      cardTitle,
      cardDoctor,
      showMore,
      anotherInfoWrap,
      buttonsWrap
    );
    buttonsWrap.append(changeButton, removeCard);
    for (let item in data) {
      if (item === "fullName") {
        cardTitle.innerText = data[item];
      } else if (item === "doctor") {
        cardDoctor.innerText =
          data[item][0].toUpperCase() + data[item].slice(1);
      } else {
        const info = document.createElement("p");
        info.innerText = `${item.toUpperCase()}: ${data[item]}`;
        info.classList.add(`${item.toUpperCase()}`);
        anotherInfoWrap.append(info);
      }
    }
    orderCards.append(cardsWrapper);

    removeCard.addEventListener("click", (event) => {
      const deleteCardFromHtml = event.target.closest(".card_wrapper");
      const createCardRequest = {
        method: `${method}`,
        headers: { Authorization: `Bearer ${token}` },
      };
      sendRequest(
        `${API}/${deleteCardFromHtml.id}`,
        "DELETE",
        createCardRequest
      )
        .then((response) => {
          if (response.status === 200) {
            cardWrapper.remove();
            this.checkingForCards();
          } else {
            throw new Error("Помилка видалення картки");
          }
        })
        .catch((error) => {
          console.log(error.message);
        });
    });
  }
}
const modal = new Modal();
createAppoint.addEventListener("click", () => {
  modal.render();
  modal.chooseDoctor();
  modal.closeCardForm();
});

let dataUser;
document.body.addEventListener("click", async (event) => {
  if (event.target.dataset.button === "change") {
    event.preventDefault();

    const cardId = event.target.closest(".card_wrapper").id;
    createAppoint.disable = true;

    const sendRequestCard = {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    };
    sendRequest(`${API}/${cardId}`, "GET", sendRequestCard).then((data) => {
      dataUser = data;
      const {
        age,
        description,
        doctor,
        fullName,
        urgency,
        visit,
        data: date,
        disease,
        massa,
        pressure,
        statusCard,
      } = data;

      modal.render(description, doctor, fullName, urgency, visit, statusCard);
      modal.closeCardForm();
      const visitDentist = new VisitDentist();
      visitDentist.test(data.doctor, date);

      const visitCardiologist = new VisitCardiologist();
      visitCardiologist.test(data.doctor, pressure, massa, disease, age);

      const visitTherapist = new VisitTherapist();
      visitTherapist.test(data.doctor, age);
      const doctorSelect = document.getElementById("doctors__select");
      doctorSelect.disabled = true;
      const statusSelect = document.getElementById("status__card");
      statusSelect.disabled = false;
      modal.submit("PUT", data.id);
    });
  }
});

const deleteAllCards = document.querySelector(".delete-button");
deleteAllCards.addEventListener("click", () => {
  const cardAll = {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    },
  };
  sendRequest("https://ajax.test-danit.com/api/v2/cards", "GET", cardAll)
    .then((response) => response)
    .then((response) => {
      const arr = response;
      arr.forEach((element) => {
        const cardWrapper = document.getElementById(`${element.id}`);
        console.log(element);
        const createCardRequest = {
          method: "DELETE",
          headers: { Authorization: `Bearer ${token}` },
        };
        sendRequest(`${API}/${element.id}`, "DELETE", createCardRequest)
          .then((response) => {
            if (response.status === 200) {
              cardWrapper.remove();
              modal.checkingForCards();
            } else {
              throw new Error("Помилка видалення картки");
            }
          })
          .catch((error) => {
            console.log(error.message);
          });
      });
    })
    .catch((error) => {
      console.log(error.message);
    });
});

//Card Filter

const urgencySelect = document.querySelector("#urgencySelect");
urgencySelect.addEventListener("change", cardsFilter);

function cardsFilter(item) {
  let filterValue = item.target.value;

  let urgencyStatus = document.querySelectorAll(".URGENCY");

  urgencyStatus.forEach((e) => {
    let currentInnerText = e.innerText.split(" ")[1];

    const deleteWrapper = e.closest(".card_wrapper");

    if (filterValue !== currentInnerText) {
      deleteWrapper.style.display = "none";
    }
    if (filterValue === currentInnerText || filterValue === "all") {
      deleteWrapper.style.display = "block";
    }
  });
}

//Select Search
const statusSelect = document.querySelector("#statusSelect");
statusSelect.addEventListener("change", statusFilter);

function statusFilter(item) {
  let filterValue = item.target.value;

  let statusStatus = document.querySelectorAll(".STATUS");

  statusStatus.forEach((e) => {
    let currentInnerText = e.innerText.split(" ")[1];

    const deleteWrapper = e.closest(".card_wrapper");

    if (filterValue !== currentInnerText) {
      deleteWrapper.style.display = "none";
    }
    if (filterValue === currentInnerText || filterValue === "all") {
      deleteWrapper.style.display = "block";
    }
  });
}

///Input Search

const inputSearch = document.querySelector("#search_filter");
let accum = "";

inputSearch.addEventListener("input", (e) => {
  if (e.data === null) {
    accum = accum.slice(0, inputSearch.value.length);
  } else {
    accum += e.data;
  }

  let allCards = document.querySelectorAll(".card_wrapper");

  allCards.forEach((oneCard) => {
    const description = oneCard.querySelector(".DESCRIPTION");
    const nameCard = oneCard.querySelector(".fullName");
    const nameDoctor = oneCard.querySelector(".doctor");
    const inputSearchValue = inputSearch.value.toLowerCase();

    function checkText(element) {
      return element.innerText.toLowerCase().includes(inputSearchValue);
    }

    const currentDescription = checkText(description);
    const currentName = checkText(nameCard);
    const currentDoctor = checkText(nameDoctor);

    if (
      currentDescription === true ||
      currentName === true ||
      currentDoctor === true
    ) {
      oneCard.style.display = "block";
    } else {
      oneCard.style.display = "none";
    }
  });
});

function sendRequest(url, method = "GET", options) {
  return fetch(url, { method: method, ...options }).then((response) => {
    if (response.ok) {
      if (method === "DELETE") {
        return response;
      }
      return response.json();
    }
  });
}

class VisitCardiologist extends Modal {
  constructor(lastVisit, doctor) {
    super(doctor);
    this.lastVisit = lastVisit;
  }

  test(likar, pressureDev = "", massaDev = "", diseaseDev = "", ageDev = "") {
    const doctorWrapper = document.querySelector(".specialDoctorWrapper");
    if (likar === "cardiologist") {
      doctorWrapper.innerHTML = "";
      doctorWrapper.insertAdjacentHTML(
        "beforeend",
        `
                      <div class="form__content__item item">
                          <label for="pressure">Normal pressure</label>
                          <input required value="${pressureDev}" class="item__input"
                          id="pressure"
                          name="pressure"
                          type="text"
                          tabindex="4"
                          />
                      </div>
                      <div class="form__content__item item">
                          <label for="massa">Body mass index</label>
                          <input required value="${massaDev}" class="item__input"
                          id="massa"
                          name="massa"
                          type="text"
                          tabindex="5"
                          />
                      </div>
                      <div class="form__content__item item">
                          <label for="disease">Transferred cardiovascular diseases</label>
                          <input required value="${diseaseDev}" class="item__input"
                          id="disease"
                          name="disease"
                          type="text"
                          tabindex="6"
                          />
                      </div>
                      <div class="form__content__item item">
                          <label for="age">Age</label>
                          <input required value="${ageDev}" class="item__input"
                          id="age"
                          name="age"
                          type="text"
                          tabindex="7"
                          />
                  </div>
                  <button type="submit" class="submit__card" >Send</button>
              `
      );
    }
  }
}

class VisitDentist extends Modal {
  constructor(lastVisit, doctor) {
    super(doctor);
    this.lastVisit = lastVisit;
  }

  test(likar, dataDev = "") {
    const doctorWrapper = document.querySelector(".specialDoctorWrapper");
    if (likar === "dentist") {
      doctorWrapper.innerHTML = "";
      doctorWrapper.insertAdjacentHTML(
        "beforeend",
        `
              <div class="form__content__item item">
                  <label for="data">Date of last visit</label>
                  <input required value="${dataDev}" class="item__input"
                  id="data"
                  name="data"
                  type="text"
                  tabindex="8"
                  />
              </div>
  
              <button type="submit" class="submit__card" >Send</button>
  
              `
      );
    }
  }
}

class VisitTherapist extends Modal {
  constructor(lastVisit, doctor) {
    super(doctor);
    this.lastVisit = lastVisit;
  }

  test(likar, ageDev = "") {
    const doctorWrapper = document.querySelector(".specialDoctorWrapper");
    if (likar === "therapist") {
      doctorWrapper.innerHTML = "";
      doctorWrapper.insertAdjacentHTML(
        "beforeend",
        `
              <div class="form__content__item item">
                  <label for="age">Age</label>
                  <input required value="${ageDev}" class="item__input"
                  id="age"
                  name="age"
                  type="text"
                  tabindex="7"
                  />
              </div>
              <button type="submit" class="submit__card" >Send</button>
              `
      );
    }
  }
}
//# sourceMappingURL=script.min.js.map
